{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","index.js","components/ContactForm/ContactForm.module.css","components/Filter/Filter.module.css","components/ContactList/ContactList.module.css"],"names":["ContactForm","onSubmit","useState","name","setName","number","setNumber","handleChange","event","currentTarget","value","className","styles","form","preventDefault","labelName","input","type","onChange","btn","disabled","Filter","onFilter","filter","label","ContactList","onDeleteContact","visibleContacts","map","id","item","onClick","App","key","defaultValue","JSON","parse","localStorage","getItem","state","setState","useEffect","window","setItem","stringify","useLocalStorage","contacts","setContacts","setFilter","normalizeFilter","toLowerCase","contact","includes","some","checkIdenticalNames","alert","userInfo","uuidv4","prevState","addContact","contactId","ReactDOM","render","StrictMode","document","querySelector","module","exports"],"mappings":"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","file":"static/js/main.ead1d056.chunk.js","sourcesContent":["import { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactForm.module.css';\n\nconst ContactForm = function ({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n    }\n  };\n\n  const resetState = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    onSubmit(name, number);\n    resetState();\n  };\n\n  return (\n    <form className={styles.form} onSubmit={handleSubmit}>\n      <label className={styles.labelName}>\n        Name\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n      <label>\n        Number\n        <input\n          className={styles.input}\n          type=\"text\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button\n        className={styles.btn}\n        type=\"submit\"\n        disabled={!(name && number) && true}\n      >\n        Add contact\n      </button>\n    </form>\n  );\n};\n\nContactForm.propTypes = {\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactForm;\n\n//  CLASS\n\n// class ContactForm extends Component {\n//   static propTypes = {\n//     name: PropTypes.string,\n//     number: PropTypes.string,\n//   };\n\n//   state = {\n//     name: '',\n//     number: '',\n//   };\n\n//   handleChange = event => {\n//     const { name, value } = event.currentTarget;\n\n//     this.setState({ [name]: value });\n//   };\n\n//   handleSubmit = event => {\n//     event.preventDefault();\n\n//     this.props.onSubmit(this.state);\n//     this.resetState();\n//   };\n\n//   resetState = () => this.setState({ name: '', number: '' });\n\n//   render() {\n//     const { name, number } = this.state;\n\n//     return (\n//       <form className={styles.form} onSubmit={this.handleSubmit}>\n//         <label className={styles.labelName}>\n//           Name\n//           <input\n//             className={styles.input}\n//             type=\"text\"\n//             name=\"name\"\n//             value={name}\n//             onChange={this.handleChange}\n//           />\n//         </label>\n//         <label>\n//           Number\n//           <input\n//             className={styles.input}\n//             type=\"text\"\n//             name=\"number\"\n//             value={number}\n//             onChange={this.handleChange}\n//           />\n//         </label>\n\n//         <button\n//           className={styles.btn}\n//           type=\"submit\"\n//           disabled={!(name && number) && true}\n//         >\n//           Add contact\n//         </button>\n//       </form>\n//     );\n//   }\n// }\n\n// export default ContactForm;\n","import PropTypes from 'prop-types';\n\nimport styles from './Filter.module.css';\n\nconst Filter = ({ onFilter, filter }) => {\n  return (\n    <label className={styles.label}>\n      Find contacts by name\n      <input\n        className={styles.input}\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilter}\n      />\n    </label>\n  );\n};\n\nFilter.propTypes = {\n  onFilter: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\n\nconst ContactList = ({ onDeleteContact, visibleContacts }) => {\n  return (\n    <ul>\n      {visibleContacts.map(({ id, name, number }) => (\n        <li className={styles.item} key={id}>\n          {name}: {number}\n          <button\n            className={styles.btn}\n            type=\"button\"\n            name={id}\n            onClick={() => onDeleteContact(id)}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  visibleContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;\n","import { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport PropTypes from 'prop-types';\nimport ContactForm from './components/ContactForm/ContactForm';\nimport Filter from './components/Filter/Filter';\nimport ContactList from './components/ContactList/ContactList';\n\n// HOOKS\n\nconst useLocalStorage = (key, defaultValue) => {\n  const [state, setState] = useState(() => {\n    return JSON.parse(localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n};\n\nconst App = function () {\n  const [contacts, setContacts] = useLocalStorage('contacts', '');\n  const [filter, setFilter] = useState('');\n\n  const handleFilter = event => {\n    const { value } = event.currentTarget;\n\n    setFilter(value);\n  };\n\n  const checkIdenticalNames = name => {\n    return contacts.some(contact => contact.name === name);\n  };\n\n  const addContact = (name, number) => {\n    const contactId = uuidv4();\n    const userInfo = { id: contactId, name, number };\n\n    setContacts(prevState => [...prevState, userInfo]);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prevState => prevState.filter(({ id }) => id !== contactId));\n  };\n\n  const handleNewContact = (name, number) => {\n    const isAlreadyInContacts = checkIdenticalNames(name);\n\n    if (isAlreadyInContacts) {\n      return alert(`${name} is already in contacts`);\n    } else {\n      addContact(name, number);\n    }\n  };\n\n  const normalizeFilter = filter.toLowerCase();\n  const visibleContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizeFilter),\n  );\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={handleNewContact} />\n\n      <h2>Contacts</h2>\n      <Filter value={filter} onFilter={handleFilter} />\n      <ContactList\n        onDeleteContact={deleteContact}\n        visibleContacts={visibleContacts}\n      />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n  filter: PropTypes.string,\n};\n\nexport default App;\n\n// CLASS\n\n// class App extends Component {\n//   static propTypes = {\n//     contacts: PropTypes.arrayOf(\n//       PropTypes.shape({\n//         id: PropTypes.string.isRequired,\n//         name: PropTypes.string.isRequired,\n//         number: PropTypes.string.isRequired,\n//       }),\n//     ),\n//     filter: PropTypes.string,\n//   };\n\n//   state = {\n//     contacts: [],\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const storageContacts = JSON.parse(localStorage.getItem('contacts'));\n\n//     if (storageContacts) {\n//       this.setState({ contacts: storageContacts });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   handleFilter = event => {\n//     const { value } = event.currentTarget;\n\n//     this.setState({ filter: value });\n//   };\n\n//   handleNewContact = newContact => {\n//     const { name, number } = newContact;\n//     const isAlreadyInContacts = this.checkIdenticalNames(name);\n\n//     if (isAlreadyInContacts) {\n//       return alert(`${name} is already in contacts`);\n//     } else {\n//       this.addContact(name, number);\n//     }\n//   };\n\n//   checkIdenticalNames = name => {\n//     return this.state.contacts.some(contact => contact.name === name);\n//   };\n\n//   addContact = (name, number) => {\n//     const contactId = uuidv4();\n\n//     this.setState(({ contacts }) => {\n//       const userInfo = { id: contactId, name, number };\n\n//       return { contacts: [...contacts, userInfo] };\n//     });\n//   };\n\n//   deleteContact = contactId => {\n//     this.setState(({ contacts }) => ({\n//       contacts: contacts.filter(({ id }) => id !== contactId),\n//     }));\n//   };\n\n//   render() {\n//     const { filter, contacts } = this.state;\n//     const normalizeFilter = filter.toLowerCase();\n//     const visibleContacts = contacts.filter(contact =>\n//       contact.name.toLowerCase().includes(normalizeFilter),\n//     );\n\n//     return (\n//       <div>\n//         <h1>Phonebook</h1>\n//         <ContactForm onSubmit={this.handleNewContact} />\n\n//         <h2>Contacts</h2>\n//         <Filter value={filter} onFilter={this.handleFilter} />\n//         <ContactList\n//           onDeleteContact={this.deleteContact}\n//           visibleContacts={visibleContacts}\n//         />\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.querySelector('#root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1fuOn\",\"labelName\":\"ContactForm_labelName__3V3cS\",\"input\":\"ContactForm_input__gm87B\",\"btn\":\"ContactForm_btn__2Bpnz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__2DoVp\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"ContactList_btn__1Xk4q\",\"item\":\"ContactList_item__3YsZK\"};"],"sourceRoot":""}